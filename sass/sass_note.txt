sass笔记

1.Sass和Scss的区别
  Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：
  (1)文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名
  (2)语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。

2.安装sass
  (1)确定先安装好了Ruby,使用Ruby -v查看确定是否安装
  (2)sudo gem install sass

  命令编译
  sass --watch test.scss:test.css

  sass --watch style.scss:style.css --style compact
  sass --watch style.scss:style.css --sourcemap
  sass --watch style.scss:style.css --style expanded --sourcemap
  sass --watch style.scss:style.css --debug-info
  --style表示解析后的css是什么格式，有四种取值分别为：nested，expanded，compact，compressed。
  --sourcemap表示开启sourcemap调试。开启sourcemap调试后，会生成一个后缀名为.css.map文件。
  --debug-info表示开启debug信息，升级到3.3.0之后因为sourcemap更高级，这个debug-info就不太用了。

  sass不同样式风格的输出方法
    嵌套输出方式 nested
    展开输出方式 expanded
    紧凑输出方式 compact
    压缩输出方式 compressed

3.语法
  (1)文件名后缀
    sass有两种后缀名文件：一种后缀名为sass，不使用大括号和分号；另一种就是我们这里使用的scss文件，
    这种和我们平时写的css文件格式差不多，使用大括号和分号。推荐使用scss

  (2)导入
    sass的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。
    但是如果你在sass文件中导入css文件如@import 'reset.css'，那效果跟普通CSS导入样式文件一样，
    导入的css文件不会合并到编译后的文件中，而是以@import方式存在。

    所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。
    这种文件在导入的时候可以不写下划线，可写成@import "mixin"。

  (3)注释
    sass有两种注释方式，一种是标准的css注释方式/* */，另一种则是//双斜杆形式的单行注释，不过这种单行注释不会被转译出来。

  (4)变量
    sass的变量必须是$开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(:)分隔开（就像CSS属性设置一样），
    如果值后面加上!default则表示默认值。

    普通变量
      定义之后可以在全局范围内使用。
      $fontsize: 12px;

      body {
        font-size: $fontsize;
      }

    默认变量
      sass的默认变量仅需要在值后面加上!default即可。
      $baseLineHeight: 1.5 !default;

    特殊变量
      一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以#{$variables}形式使用。
      $borderdirection:top !default;
      $color: #abcdef;

      .border-#{$borderdirection} {
        border-#{$borderdirection}: 1px solid $color;
      }

    多值变量
      多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。
      list
        数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如length($list)，
        join($list1,$list2,[$separator])，append($list,$value,[$separator])等
        $heading: 1px 2px 3px 4px;
      map
        map数据以key和value成对出现，其中value又可以是list。格式为：$map: (key1: value1, key2: value2, key3: value3);。
        可通过map-get($map,$key)取值。关于map数据还有很多其他函数如map-merge($map1,$map2)，map-keys($map)，map-values($map)等，
        $testing: (h1:2em,h2:3em);

    全局变量
      在变量值后面加上!global即为全局变量。这个目前还用不上，不过将会在sass 3.4后的版本中正式应用。目前的sass变量范围饱受诟病，所以才有了这个全局变量

  (5)嵌套
    sass的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。我们一般说起或用到的都是选择器的嵌套。
    选择器嵌套
      所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。
      在选择器嵌套中，可以使用&表示父元素选择器
      .navtop {
        a {
          color: $color;

          &:hover {
            color: $testcolor;
          }
        }
      }

    属性嵌套
      所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。拿个官网的实例看下：
      .fakeshadow {
        border: {
          style: solid;

          left: {
            width: 4px;
            color: #888;
          }
          right: {
            width: 2px;
            color: #ccc;
          }
        }
      }

      @at-root
      sass3.3.0中新增的功能，用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。
      普通跳出嵌套
        //单个选择器跳出
        .parent-2 {
          color:#f00;
          @at-root .child {
            width:200px;
          }
        }

  (6)混合(mixin)
    sass中使用@mixin声明混合，可以传递参数，参数名以$符号开始，多个参数以逗号分开，也可以给参数设置默认值。声明的@mixin通过@include来调用。
    无参数mixin
      @mixin center-block {
        margin-left:auto;
        margin-right:auto;
      }
      .demo{
        @include center-block;
      }
    有参数mixin
      @mixin opacity($opacity:50) {
        opacity: $opacity / 100;
        filter: alpha(opacity=$opacity);
      }
    多个参数mixin
      调用时可直接传入值，如@include传入参数的个数小于@mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值，
      如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。
      @mixin horizontal-line($border:1px dashed #ccc, $padding:10px){
          border-bottom:$border;
          padding-top:$padding;
          padding-bottom:$padding;
      }
      .imgtext-h li{
          @include horizontal-line(1px solid #ccc);
      }
      .imgtext-h--product li{
          @include horizontal-line($padding:15px);
      }

    (7)@content
      @content在sass3.2.0中引入，可以用来解决css3的@media等带来的问题。它可以使@mixin接受一整块样式，接受的样式从@content开始。

    (8)继承
      sass中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词@extend，后面紧跟需要继承的选择器。
      h1{
        border: 4px solid #ff9aa9;
      }
      .speaker{
        @extend h1;
        border-width: 2px;
      }

    (9)占位符 %
      从sass 3.2.0以后就可以定义占位选择器%。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，
      避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了@extend去继承相应的样式，
      都会解析出来所有的样式。占位选择器以%标识定义，通过@extend调用。
      %ir{
        color: transparent;
        text-shadow: none;
        background-color: transparent;
        border: 0;
      }
      %clearfix{
        @if $lte7 {
          *zoom: 1;
        }
        &:before,
        &:after {
          content: "";
          display: table;
          font: 0/0 a;
        }
        &:after {
          clear: both;
        }
      }
      #header{
        h1{
          @extend %ir;
          width:300px;
        }
      }
      .ir{
        @extend %ir;
      }

    (10)函数
      sass定义了很多函数可供使用，当然你也可以自己定义函数，以@fuction开始。sass的官方函数链接为：sass fuction，
      实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以lighten减淡和darken加深为最，
      其调用方法为lighten($color,$amount)和darken($color,$amount)，它们的第一个参数都是颜色值，第二个参数都是百分比。
      $baseFontSize: 10px !default;
      $gray: #ccc !defualt;

      // pixels to rems
      @function pxToRem($px) {
      @return $px / $baseFontSize * 1rem;
      }

      body{
      font-size:$baseFontSize;
      color:lighten($gray,10%);
      }
      .test{
      font-size:pxToRem(16px);
      color:darken($gray,10%);
      }

    (11)运算
      sass具有运算的特性，可以对数值型的Value(如：数字、颜色、变量等)进行加减乘除四则运算。请注意运算符前后请留一个空格，不然会出错。

    (12)条件判断及循环
      @if判断
      @if可一个条件单独使用，也可以和@else结合多条件使用
      $lte7: true;
      $type: monster;
      .ib{
          display:inline-block;
          @if $lte7 {
              *display:inline;
              *zoom:1;
          }
      }
      p {
        @if $type == ocean {
          color: blue;
        } @else if $type == matador {
          color: red;
        } @else if $type == monster {
          color: green;
        } @else {
          color: black;
        }
      }

    (13)三目运算
      语法为：if($condition, $if_true, $if_false) 。三个参数分别表示：条件，条件为真的值，条件为假的值。
      if(true, 1px, 2px) => 1px
      if(false, 1px, 2px) => 2px

    (14)@for循环
      for循环有两种形式，分别为：@for $var from <start> through <end>和@for $var from <start> to <end>。
      $i表示变量，start表示起始值，end表示结束值，这两个的区别是关键字through表示包括end这个数，而to则不包括end这个数。
      @for $i from 1 through 3 {
        .item-#{$i} { width: 2em * $i; }
      }

    (15)@each循环
      语法为：@each $var in <list or map>。其中$var表示变量，而list和map表示list类型数据和map类型数据。
      sass 3.3.0新加入了多字段循环和map数据循环。
      单个字段list数据循环
      $animal-list: puma, sea-slug, egret, salamander;
      @each $animal in $animal-list {
        .#{$animal}-icon {
          background-image: url('/images/#{$animal}.png');
        }
      }
      多个字段list数据循环
      $animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);
      @each $animal, $color, $cursor in $animal-data {
        .#{$animal}-icon {
          background-image: url('/images/#{$animal}.png');
          border: 2px solid $color;
          cursor: $cursor;
        }
      }
      多个字段map数据循环
      $headings: (h1: 2em, h2: 1.5em, h3: 1.2em);
      @each $header, $size in $headings {
        #{$header} {
          font-size: $size;
        }
      }
