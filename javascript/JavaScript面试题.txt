/**
 * Javascript面试题
 * name:peter
 */

1.计算从1加到100的和。
	var sum = 0;
	for(var a = 1;a<=100;a++){
		sum+=a;
	}

2.计算从1乘到100的值。
	var r=1;
	for(var n =2;n<=100;n++){
		r*=n;
	}
	console.log(r);

3.打印九九乘法口诀表
	for(var a=1,str='';a<=9;a++){
		for(var i=1; i <=a;i++){
		        str+= a+'*'+i+'='+a*i+" ";
		}
		str+='\n';
		}
	console.log(str);

4.输出正三角
	function printTriangle(l){
		for(var r=1;r<=l;r++){
			/*打印任意一行的公式*/
			for(var i=0,str="";i<r;str+="*",i++);
			console.log(str);
		}
	}

5.输出反三角
	function printTriangle2(l){
		for(var r=1;r<=l;r++){
			/*输出三角中的任意一行！*/
			//每行输出l-r个空格,之后都是*
			/*三要素：
			1. 循环条件：字符个数<l
			2. 循环变量：字符个数，从0开始，每次+1
		              str="",每次向其中拼一个字符
			3. 循环体：如果字符个数<(l-r),拼空格
		             否则拼*
			*/
			for(var i=0,str="";i<l;i++){
				str+=i<(l-r)?" ":"*";
			}
			console.log(str);
		}
	}

6.打印等腰三角形
	function printdengyao(l){
		for(var r=1;r<=l;r++){
			for(var i=0,str="";i<l+r-1;i++){
				str+=i<l-r?" ":"*";
			}
			console.log(str);
		}
	}
	printdengyao(6);

7.去除数组中重复的元素
	var arr=['1','2','3','3','4','5','5'];
	var hash=[];
	for(var i=0;i<arr.length;i++){
		hash[arr[i]]=1;
	}
	var newArr=[];
	for(newArr[newArr.length] in hash);
	console.log(newArr);

8.冒泡排序
	var arr=[4,2,5,3,8,7,6];
	/*第1轮比较*/
	/*遍历数组中每个元素
		下标从0开始，到<arr.length-1结束，每次下标++
		如果当前元素>下一个元素
		    则交换前后两元素的位置
			    声明变量tmp，赋值为当前元素的值
				将下一个元素的值赋值给当前元素
				将tmp中的值赋值给下一个元素
	*/
	for(var i=0;i<arr.length-1;i++){
		if(arr[i]>arr[i+1]){
			var tmp=arr[i];
			arr[i]=arr[i+1];
			arr[i+1]=tmp;
		}
	}
	for(var n=1;n<arr.length;n++){
	/*第n轮比较：n从1开始，到<length结束*/
	for(var i=0;i<arr.length-n;i++){
		if(arr[i]>arr[i+1]){
			var tmp=arr[i];
			arr[i]=arr[i+1];
			arr[i+1]=tmp;
		}
	}
	}
	console.log(arr); //?

9.使用数组打印正三角
	var l=6;
	for(var r=1;r<=l;r++){
	for(var i=0,arrs=[];i<r;arrs[arrs.length]="*",i++);
	console.log(arrs.join(""));
	}

10.使用数组打印反三角
	var l=6;
	for(var r=1;r<=l;r++){
	for(var i=0,arrs=[];i<l;i++){
		arrs[arrs.length]=i<l-r?" ":"*";
	}
	console.log(arrs.join(""));
	}

11.使用比较器，做数字，字符串比较
	<script type="text/javascript">
		var arr1=['22',11,'4','6',4,'3'];
		var arr2=['job','aa','cc','zz'];
		function compare(arr,compare){
			for(var n=1;n<arr.length;n++){
				for(var i=0;i<arr.length-n;i++){
					if(compare(arr[i],arr[i+1])>0){
						var tmp=arr[i+1];
						arr[i+1]=arr[i];
						arr[i]=tmp;
					}
				}
				//console.log(arr);
			}
			console.log(arr);
		}
		compare(arr1,compareNum);
		compare(arr2,compareStr);
		function compareNum(a,b){
			return a-b;
		}
		//compareNum(11,12);
		function compareStr(a,b){
			return a>b?1:a<b?-1:0;
		}

	</script>

12.鸡兔同笼

	function getsum(tou,jiao){
		var a=0;//鸡
		var b=0;//兔
		for(var a=0;a<tou;a++){
			b=tou-a;
			if(2*a+4*b==132){
				console.log("鸡有" + a + "只，免有" + b + "只")
			}
		}
	}
	getsum(48,132);

	//排序
	var arr = [2,5,7,2,4];
	function desc(arr){
		for(var n=1;n<arr.length;n++){
			for(var i=0;i<arr.length-n;i++){
				if(arr[i]<arr[i+1]){
					var tmp=arr[i];
					arr[i]=arr[i+1];
					arr[i+1]=tmp;
				}
			}
		}
		console.log(arr);
	}
	desc(arr);

谈谈前段性能的优化
简要描述行内元素与块级元素的区别
表单向服务器提交的数据有几种方式？这些方式有什么区别
你知道的网络状态码有哪些
谈谈你对浏览器兼容性的问题的理解
AJAX都有哪些优点和缺点
	优点
	页面局部刷新，提高用户体验度
	使用异步方式与服务器通行，具有更加迅速的响应能力
	减轻服务器负担
	缺点
	不支持浏览器back按钮
	安全问题
	对搜索引擎的支付比较弱


排除数组当中null,undefined和不存在的元素
    for(var i=0;i<a.length;i++)
    {
        if(!a[i]) continue; //跳过null undefined和不存在的元素
    }
如果只想跳过undefined和不存在的元素
    for(var i=0;i<a.length;i++)
    {
        if(a[i] === undefined) continue; //跳过undefined和不能存在的元素
    }
如果只想跳过不存在的元素而仍然需要处理存在的undefined元素
    for(var i=0;i<a.length;i++)
    {
        if(!(i in a)) continue; //跳过不存在的元素
    }

定义比较器 比较数组
var arr1 = [12,5,4,12,4,3,11,1];
//建立比较器函数对数字做比较
function cmp(a,b)
{
    return a-b;
}
console.log(arr1.sort(cmp));


//简单的字母比较器
var arr2 = ['b','AS','d','a'];
arr2.sort();
console.log(arr2);
arr2.sort(function(s,t){
    var a = s.toLowerCase();
    var b = t.toLowerCase();
    if (a>b) return 1;
    if (a<b) return -1;
    return 0;
});
console.log(arr2);
	
定义getMax() 获取数组中的最大值
//找出数组中的最大值
var arr4 = [4,3,2,6,7,4,1];
function getMax(arr)
{
  for (var i=0,max=arr[0];
       i<arr.length;
       arr[i]>max&&(max=arr[i]),i++);
  return max;
}
console.time(getMax(arr4));
console.log(getMax(arr4));
console.timeEnd(getMax(arr4));


//数组去重
var arr5 = [2,3,3,6,5,3];
function unique(arr)
{
    var hash = [];
    hash[arr[0]]=1

    for (var i=1;i<arr.length;i++)
    {
        if(hash[arr[i]] === undefined)
        {
            hash[arr[i]]=1;
        }
    }
    var key = [];
    i = 0;
    for(key[i++] in hash);
    return key;
}


//判断是否是空数组
var arr1=[];
var arr2=[,,,,,,,,,];
var arr3=[,,,2,,,1,,];
console.log(arr1.join(""));
console.log(arr2.join(""));
console.log(arr3.join(""));


/*交换两变量的值:*/
var a=3,b=5;
/*方法1: 使用第三个变量(鄙视时禁用)
var t=a; a=b; b=t;*/
/*方法2: 异或 ——只能交换数字
a^=b; b^=a; a^=b;*/
/*方法3: 做加减 ——只能交换数字
a+=b; b=a-b; a-=b;*/
/*方法4: 万能*/
a=[b,b=a][0];
console.log(a,b);


鄙视题: 判断一个对象是不是数组类型: 共几种方法
   错误: typeof()――只能区分原始类型和function，无法区分内置对象类型
   解决:
    1. 判断原型对象: var bool=father.isPrototypeOf(child)
          判断father是不是child的父对象
    2. 判断构造函数:
           var bool=child instanceof 构造函数
             判断child是不是用指定的构造函数创建出来的
       instance: 实例: 用构造函数创建出的一个子对象
       实例化: 用new调用构造函数创建一个对象
    问题: 前两个检查不仅检查直接父对象，而且还检查整个原型链。
    解决:
    3. 检查对象的class属性:  和原型链无关
        每个对象中都有一个内部属性class: 记录了对象创建时的类型。一旦创建，不会更改。
        问题1: class不允许用.直接访问
        解决: obj.toString() -> "[object class]"
            其中class可能为: Object Array Date ...
        问题2: 多数内置对象重写了toString方法
                   重写的toString方法已经无法返回class
        解决: 临时借用函数:
           函数.call(对象)  -> 对象.函数()
           Object.prototype.toString.call(obj1)
                                    -> obj1.toString();
  4. ES5 : Array.isArray(obj)


//检测一个对象属性是自有属性还是公有属性
function checkProp(obj,attr){
    if(obj.hasOwnProperty(attr)){
        return "自有属性属性";
    }else if(obj[attr] !== undefined){
        return "共有的属性";
    }else{
        return "没有这个属性";
    }
}


//自定义array的indexof方法
var arr1 = [2,3,5,1,3,6,7];
if(Array.prototype.xindexOf === undefined){
    Array.prototype.xindexOf=function(value,start){
        //var i = start !== undefined ? start : 0;
        //console.log(i);
        start === undefined && (start=0)
        for (var i=start;i<this.length;i++){
            if(this[i] === value)
            {
                return i;
            }
        }
        return -1;
    }
}
console.log(arr1.xindexOf(1,2));


//使用自定义的string的trim方法
var str1 = " \txulukun \t ";
if(String.prototype.xtrim === undefined){
String.prototype.xtrim = function(){
    return this.replace(/^\s+|\s+$/g,"");
}
}
document.write(str1);
document.write("|"+str1.xtrim()+"|");


call与apply的区别？


3、^(按位异或)
    两个数的二进制中，对应位的数字只有一个为1时，该位结果才为1，否则  则为0
    ex: 5^3
    5:101
    3:011
    -------
      110
    使用场合：
        在不借助任何变量的情况下，交换两个数字

        var num1 = 8;
        var num2 = 5;
        //借助第三方变量
        var temp=num1;
        num1 = num2;
        num2 = temp;
        //使用异或运算符
        num1 = num1 ^ num2;
        num2 = num2 ^ num1;
        num1 = num1 ^ num2;

        8 : 1000
        5 : 0101

        num1 = num1 ^ num2;
        8 : 1000
        5 : 0101
        ---------------
            1101 ==> 13

        num2 = num2 ^ num1;
        8 : 1000
        13: 1101
        ---------
            0101 ==> 5

        num1 = num1 ^ num2;
        13 : 1101
        5  : 0101
        --------------
             1000


2、猴子吃桃
    问题：
        猴子第一天摘下若干桃子，当即吃了一半，不过瘾，又多吃1个
        第二天，将剩下的桃子又吃掉一半，又多吃1个
        第三天，将剩下的桃子又吃掉一半，又多吃1个
        ....
        第十天，只剩下1个桃子
        求：猴子第一天摘了多少桃子

        假设：第一天 摘了 x 个桃子，第10天剩1个
        第10天 x=1
        第9天 x/2-1 = 1  ...4
        第8天 x/2-1 = 4  ...10
        第7天 x/2-1 = 10 ...22

        x = (剩余+1)*2;

function peach(){
    var total,left=1;
    var day = 9;

    while(day>=1){
        total = (left + 1) * 2;
        left = total;
        day--;
    }

    console.log("第一天，猴子共摘了"+total+"个桃子!");
}
var x = 1;
var n = null;
for(var i=10;i>1;i--){
	x = (x+1)*2;
}
console.log(x);



求一下程序运行的值？a=100
var a=0;
	function one(){
		for(var i=0;i<10;i++){
			setTimeout(function(){
				a+=i;
			},0);
		}
	}
	function two(){
		alert(a);
	}
	one();
	setTimeout(two,0);

