PHP手记

数据类型
	8个主要类型和4个伪类型
	1.标量类型(存储单一值)
		整型(Int)
		浮点型(Float)
		布尔类型(bool)
		字符串(String)
	2.复合类型
		数组(Array)
		对象(Object)
	3.特殊类型
		资源(Resource)
		NULL
	4.伪类型
		mixed :混合类型，参数可以接受多种不同的（但不一定是所有的）类型
		number: 数值类型,包含整型和浮点型
		 		例如: pow:求次幂 
				number pow ( number $base , number $exp )
		void :空类型, 如果void 在返回值上代表没返回值
		              如果void 在参数上代表没参数
 			  例如:void echo ( string $arg1 [, string $... ] )
		callback:回调函数,一个函数的名称作为另一个函数的参数使用

	注意：
	5.字符串(String)
		单引号与双引号的区别？
			单引号不解析变量，双引号解析变量
			双引号能解析所有转义字符，而单引号只能解析\'和\\两个
		定界符
			HereDOC
			格式
     		$变量名称 =<<<定界符名称
			       ...
			定界符名称; //此处必须顶格
			说明:
				大段代码可以用HereDoc实现
				结束定界符必须在行首
				HereDoc能解析所有的变量和转义字符
			NowDOC
		{}的使用
			用{}将变量名称作为一个整体括起来
			说明:当用双引号输出变量，PHP引擎能解析双引号中的变量，PHP引擎将尽可能多的合法字符串作为变量名称如果告诉PHP引擎到此为止，那要用{}将变量名称作为一个整体括起来
			用{}对变量中的某一个值实现增删改查
			说明:
				可以用[]代替{},编号从0开始
				当编号大于长度，用一个空格填补




数据类型转换
	PHP是弱类型语言，会根据程序的运行环境自动转换
	1.自动转换(隐式转换)
		(1)其它类型转为整型或浮点型
			布尔值 true转为1 false转为0
			null转为0
			空字符串转为0
		(2)其它类型转为字符类型
	        整型和浮点转为字符类型就是该数值本身
	        布尔类型 true转为 '1',false转为 空字符串
	        null 转为 空字符串
	        数组转为 字符类型   'Array'
        	资源转为 字符类型   'Resource id #数字'
    	(3)其它类型转为布尔类型
			下面情况转为 false:
				布尔值 false
				空字符串 false
				null 转为false
				整数0,浮点数的0.0,字符串'0' "0"转为false
				空数组 array() 转为false
			其它情况都为true.
	2.强制转换(显式转换)
		(1)临时转换 (变量本身没变化)
			整型  (integer)$var|(int)$var
			浮点型 (float)$var |(double)$var|(real)$var
			布尔型  (boolean)$var| (bool)$var
			字符类型  (string)$var
			数组       (array)$var
			对象       (object)$var
			null类型  (unset)$var
		(2)函数
			整数 intval($var)
			浮点型 floatval($var)|doubleval($var)
			布尔类型 boolval($var)--PHP5.5以上支持
			字符类型 strval($var)
		(3)永久转换 (变量本身发生变化)
			settype:设置变量类型
			    格式: bool settype ( mixed &$var , string $type )
			         成功返回true 失败返回 false
			gettype:获得变量类型
			    格式: string gettype ( mixed $var )



函数
	什么是函数:封装的，可以重复使用的完成特定功能的代码段
	函数分类
		系统函数
		自定义函数
	1.类型判别函数库
		a. is_int |is_integer|is_long
		      检测变量是否是整数  
		      格式:bool is_int(string $var)
		b. is_float |is_double|is_real
		      检测变量是否是浮点 
		c. is_bool
		      检测变量是否是布尔 
		d. is_string
		     检测变量是否是字符           
		e. is_array 检测变量是否是数组
		f. is_object 检测变量是否是对象
		g. is_resource 检测变量是否是资源
		h. is_null 检测变量是否是null
		i. is_numeric 检测变量是否数值(整数,浮点,合法的数字字符串)
		j. is_scalar 检测变量是否是标量(整型,浮点型,布尔,字符型)




运算符(Operator)
	1.算术运算符: (-)减号  (+)加号  + - * / %(求余数)
	2. ++(自增,递增) --(自减,递减)运算符
		a.原理: ++$var --$var  $var++ $var--
		             前缀形式: 变量自身先加1或减1,后执行语句
		             后缀形式: 先执行语句,变量自身后加1或减1
		b. 数据类型支持
		(a) 数值类型支持自增和自减
		(b) 布尔类型不支持自增和自减
		(c) null支持自增不支持自减
		(d) 字符类型(纯字母)支持自增不支持自减
	3.字符(连接)运算符: .
		说明: 字符(连接)运算符结果字符类型
	4.赋值运算符: = , += -= *= /= %= .=
		说明:赋值运算符结果与运算符号有关系。
	5.比较运算符: > >= < <= ==(等于) != <>(不等于) ===全等于 !==不全等于
		说明:
			a.比较运算符结果布尔类型
			b.  ===全等于 :值和类型都相等才为真，否则为假
			c.  !==不全等于:值和类型都相等才为假,否则为真   
			d.比较运算类型转换
			(a)字符串或null 跟字符串的比较,null转为
			      空字符串;数值之间或字母之间按数值和字母按
			      位比较;数值跟字母比较按位的ASCII值比较
			(b)布尔类型或null 跟其他类型比较,按布尔值比较
			null 布尔值false, true > false             

			(c)数值或字符串跟数值比较,转为数值类型比较
			e. ===全等于 和  !==不全等于的使用
			 原理:PHP是弱类型语言,变量会根据程序运行环境
			         自动换行，例如 0,0.0,'0'自动转为布尔值
			false,为了避免自动转换产出的错误，需要
			          用===全等于 和  !==不全等于解决
			(将0和false区分开,严格比较)
	6.逻辑运算符：!(非), && and(与,并且), || or(或者),xor 异或
		说明:
			a.逻辑运算符结果布尔类型
			b.&& and(与,并且,&&优先级高):第一个表达式和
			     第二个表达式都为真才为真,否则为假
			c. || or(或者)：第一个表达式和
			     第二个表达式都为假才为假,否则为真
			d.xor 异或 ：第一个表达式和第二个
			             表达式布尔值不同为真,相同为假
			e. 短路问题:第一个表达式的结果就能确定整
			         个表达式结果，那第二个表达式忽略不执行
			&& and(与,并且)产生短路：
			         当第一个表达式为假产生短路，那第二个表达式忽略不执行 
			|| or(或者)产生短路：
			         当第一个表达式为真产生短路，那第二个表达式忽略不执行
    7.错误抑制符: @ 忽略错误,没错误不忽略
    8.执行运算符：`` 反引号
        说明:
            a.PHP命令行模式
            b.php.ini  safe_mode=Off关闭
    9.按操作数个数分
        (1)单目(一元)运算符:1个操作数
               (+)正号(-)负号 ++ -- ! @ 等
        (2)双目(二元)运算符:2个操作数
                + - * /  % 等
        (3)三目(三元)运算符:3个操作数
              expr1?expr2:epxr3
                 说明:
            a. 如果expr1表达式为真那么执行expr2
                           否则执行epxr3
            b. PHP5.3以上支持
               expr1?expr1:expr3
   10.运算符优先级
        (1)一元运算符和赋值运算符是右结合(从右往左运算)
                  其他都是左结合
        (2)优先级高先运行,优先级低的后运行,优先级同级
                  按左结合或右结合顺序执行
        (3)用()先执行
        (4)有短路先考虑短路
        (5)运算符优先级表
                     一元   二元(算术  比较  逻辑(先&& 后||)) 三元
                     赋值运算符   and xor or




流程控制语句
     1.流程控制语句:程序是自上而下顺序逐行执行,如果想通过某个条件执
        行某段代码或重复执行某段代码,就要用到流程控制语句
     2.流程控制语句种类
       (1)条件分支语句
       (2)循环语句
     3. 条件分支语句
        (1)if单分支语句:
            if(expr条件){
            ...
            }
            说明：
            a.如果expr条件为真执行if后面大花括号里代码
                    如果expr条件为假跳过if语句,执行后面顺序语句
            b.如果if后面大花括号里代码只有一条语句
                      可以省略{},推荐不省略
        (2)if双分支语句
            if(expr条件){
            ....
            }else{
            ....
            }
            说明:
           a.如果expr条件为真执行if后面大花括号里代码
                        如果expr条件为假执行else后面大花括号里代码
           b.二选一语句组
        (3)if多分支语句
            if(expr1条件){
            ...
            }elseif(expr2条件){
            ...
            }elseif(expr3条件){
            ...
            }......
            [else{
            echo '条件都为假执行的语句组';
            }]
            说明:
            a.多分支语句根据不同的条件执行对应代码段
                 如果某个条件为真执行对应代码段结束多分
                 支语句，如果条件都为假并且else存在
                 那执行else后面的代码段结束多分
                 支语句
            b.多选一语句组
        (4)if嵌套语句
            a.在if大花括号中写嵌套
            if(expr1){
               if(expr2){
                 ...
               }else{
                 ...
               }
            }else{
              ......
            }
            b.在else大花括号中写嵌套
            if(expr1){
                .....
            }else{
                if(expr2){
                 ...
               }else{
                 ...
               }
            }

        (5)switch 语句(多分支)
            a.格式
            switch(变量名称){
            case value:
             ...
             break;
            case value:
             ...
             break;
            case value:
             ...
             break;
            ......
            default:
             ...
             break;

            }
            说明:
            (a)判断变量名称等于特定的值
            (b)case 等同于 ==(松散比较)
            (c)switch没有结束分支语句的功能
                   所以用 break，continue 来结
                   束分支语句



时间日期函数库
    1.设置时区
        date_default_timezone_set(string $timezone)
        说明:
        $timezone值 默认UTC欧洲时区
        a. PRC
        b.
        Asia/Shanghai
        Asia/Chongqing
        c. php.ini 配置文件
        date.timezone = PRC
            重启apache服务器
    2.获得时区
        date_default_timezone_get()
    3.格式化时间日期函数
        string  date(string $format[,int $timestamp]);
        说明:
        a. $format
         Y: 4位的年(year)
         m: 2位的月(month)
         d: 2位的日(day)
         H: 2位的小时(hours)
         i: 2位的分钟(minutes)
         s: 2位的秒(seconds)
        b. $timestamp
                  默认值 time()
                  时间戳:从1970-1-1 00:00:00 到现在的秒数
    4.time：返回当前的 Unix 时间戳
    5.strtotime：将任何英文文本的日期时间描述解析为 Unix 时间戳